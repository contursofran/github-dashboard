// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "postgresql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  username      String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  repositories  Repository[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Repository {
  id       String     @id @default(cuid())
  name     String
  owner    String
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String     @map("user_id")
  features Features[]
  tasks    Tasks[]
  issues   Issues[]

  @@unique([owner, name])
  @@map("repositories")
}

model Features {
  id           String     @id @default(cuid())
  title        String
  description  String?
  tag          String?
  type         Type
  index        Int
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  repositoryId String     @map("repository_id")

  @@map("features")
}

model Tasks {
  id           String     @id @default(cuid())
  title        String
  description  String?
  tag          String?
  type         Type
  index        Int
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  repositoryId String     @map("repository_id")

  @@map("tasks")
}

model Issues {
  id           String     @id @default(cuid())
  title        String
  description  String?
  tag          String?
  type         Type
  index        Int
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  repositoryId String     @map("repository_id")

  @@map("issues")
}

enum Type {
  Todo
  InProgress
  Done
}
